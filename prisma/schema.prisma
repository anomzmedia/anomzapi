model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  password     String
  profilePhoto String    @default("/9.png")
  posts        Post[]
  comments     Comment[]
  noteText String?
  noteEndDate DateTime?
  noteTrackId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  messagesFrom Message[] @relation("messagefrom")
  messagesTo Message[] @relation("messageto")
  DMList String[] @default([])
  groupsId String[] @db.ObjectId
  groups Group[] @relation("groups", fields: [groupsId], references: [id])
  ownerGroups Group[] @relation("ownerGroups")
  followers Follows[] @relation("following")
  followings Follows[] @relation("follower")

  fromVoiceChats VoiceChat[] @relation("fromVoiceChats")
  toVoiceChats VoiceChat[] @relation("toVoiceChats")
}

model VoiceChat{
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  fromId String @db.ObjectId
  from User @relation("fromVoiceChats",fields: [fromId], references: [id])

  toId String @db.ObjectId
  to User @relation("toVoiceChats",fields: [toId], references: [id])
}

model Follows{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  following User @relation("following", fields: [followingId], references: [id])
  follower User @relation("follower", fields: [followerId], references: [id])
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  authorId String    @db.ObjectId
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message{
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fromId String? @db.ObjectId
  from User? @relation("messagefrom", fields: [fromId], references: [id])

  toId String? @db.ObjectId
  to User? @relation("messageto", fields: [toId], references: [id])
  
  groupId String? @db.ObjectId
  group Group? @relation("messageGroup", fields: [groupId], references: [id])

  system Boolean @default(false)

  createdAt DateTime @default(now())
}

model Group{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  profilePhoto String @default("/anomz2.png")

  usersId String[] @db.ObjectId
  users User[] @relation("groups", fields: [usersId], references: [id])

  ownerId String @db.ObjectId
  owner User @relation("ownerGroups", fields: [ownerId], references: [id])

  messages Message[] @relation("messageGroup")

  createdAt DateTime @default(now())
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
